//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5485
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.CompactFramework.Design.Data, Version 2.0.50727.5485.
// 
namespace invsys.Mobile.Embarques {
    using System;
    using System.Data;
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("EmbInvDataSet")]
    public partial class EmbInvDataSet : global::System.Data.DataSet {
        
        private BulkDataTable tableBulk;
        
        private CatInventarioDataTable tableCatInventario;
        
        private CatMaterialDataTable tableCatMaterial;
        
        private CatMaterialNoDataTable tableCatMaterialNo;
        
        private catUsuariosDataTable tablecatUsuarios;
        
        private EmbarqueDataTable tableEmbarque;
        
        private EmbarqueMaterialDataTable tableEmbarqueMaterial;
        
        private InventarioDataTable tableInventario;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public EmbInvDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public BulkDataTable Bulk {
            get {
                return this.tableBulk;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CatInventarioDataTable CatInventario {
            get {
                return this.tableCatInventario;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CatMaterialDataTable CatMaterial {
            get {
                return this.tableCatMaterial;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CatMaterialNoDataTable CatMaterialNo {
            get {
                return this.tableCatMaterialNo;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public catUsuariosDataTable catUsuarios {
            get {
                return this.tablecatUsuarios;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public EmbarqueDataTable Embarque {
            get {
                return this.tableEmbarque;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public EmbarqueMaterialDataTable EmbarqueMaterial {
            get {
                return this.tableEmbarqueMaterial;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public InventarioDataTable Inventario {
            get {
                return this.tableInventario;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            EmbInvDataSet cln = ((EmbInvDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Bulk"] != null)) {
                    base.Tables.Add(new BulkDataTable(ds.Tables["Bulk"]));
                }
                if ((ds.Tables["CatInventario"] != null)) {
                    base.Tables.Add(new CatInventarioDataTable(ds.Tables["CatInventario"]));
                }
                if ((ds.Tables["CatMaterial"] != null)) {
                    base.Tables.Add(new CatMaterialDataTable(ds.Tables["CatMaterial"]));
                }
                if ((ds.Tables["CatMaterialNo"] != null)) {
                    base.Tables.Add(new CatMaterialNoDataTable(ds.Tables["CatMaterialNo"]));
                }
                if ((ds.Tables["catUsuarios"] != null)) {
                    base.Tables.Add(new catUsuariosDataTable(ds.Tables["catUsuarios"]));
                }
                if ((ds.Tables["Embarque"] != null)) {
                    base.Tables.Add(new EmbarqueDataTable(ds.Tables["Embarque"]));
                }
                if ((ds.Tables["EmbarqueMaterial"] != null)) {
                    base.Tables.Add(new EmbarqueMaterialDataTable(ds.Tables["EmbarqueMaterial"]));
                }
                if ((ds.Tables["Inventario"] != null)) {
                    base.Tables.Add(new InventarioDataTable(ds.Tables["Inventario"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableBulk = ((BulkDataTable)(base.Tables["Bulk"]));
            if ((initTable == true)) {
                if ((this.tableBulk != null)) {
                    this.tableBulk.InitVars();
                }
            }
            this.tableCatInventario = ((CatInventarioDataTable)(base.Tables["CatInventario"]));
            if ((initTable == true)) {
                if ((this.tableCatInventario != null)) {
                    this.tableCatInventario.InitVars();
                }
            }
            this.tableCatMaterial = ((CatMaterialDataTable)(base.Tables["CatMaterial"]));
            if ((initTable == true)) {
                if ((this.tableCatMaterial != null)) {
                    this.tableCatMaterial.InitVars();
                }
            }
            this.tableCatMaterialNo = ((CatMaterialNoDataTable)(base.Tables["CatMaterialNo"]));
            if ((initTable == true)) {
                if ((this.tableCatMaterialNo != null)) {
                    this.tableCatMaterialNo.InitVars();
                }
            }
            this.tablecatUsuarios = ((catUsuariosDataTable)(base.Tables["catUsuarios"]));
            if ((initTable == true)) {
                if ((this.tablecatUsuarios != null)) {
                    this.tablecatUsuarios.InitVars();
                }
            }
            this.tableEmbarque = ((EmbarqueDataTable)(base.Tables["Embarque"]));
            if ((initTable == true)) {
                if ((this.tableEmbarque != null)) {
                    this.tableEmbarque.InitVars();
                }
            }
            this.tableEmbarqueMaterial = ((EmbarqueMaterialDataTable)(base.Tables["EmbarqueMaterial"]));
            if ((initTable == true)) {
                if ((this.tableEmbarqueMaterial != null)) {
                    this.tableEmbarqueMaterial.InitVars();
                }
            }
            this.tableInventario = ((InventarioDataTable)(base.Tables["Inventario"]));
            if ((initTable == true)) {
                if ((this.tableInventario != null)) {
                    this.tableInventario.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "EmbInvDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/EmbInvDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableBulk = new BulkDataTable();
            base.Tables.Add(this.tableBulk);
            this.tableCatInventario = new CatInventarioDataTable();
            base.Tables.Add(this.tableCatInventario);
            this.tableCatMaterial = new CatMaterialDataTable();
            base.Tables.Add(this.tableCatMaterial);
            this.tableCatMaterialNo = new CatMaterialNoDataTable();
            base.Tables.Add(this.tableCatMaterialNo);
            this.tablecatUsuarios = new catUsuariosDataTable();
            base.Tables.Add(this.tablecatUsuarios);
            this.tableEmbarque = new EmbarqueDataTable();
            base.Tables.Add(this.tableEmbarque);
            this.tableEmbarqueMaterial = new EmbarqueMaterialDataTable();
            base.Tables.Add(this.tableEmbarqueMaterial);
            this.tableInventario = new InventarioDataTable();
            base.Tables.Add(this.tableInventario);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeBulk() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCatInventario() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCatMaterial() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCatMaterialNo() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializecatUsuarios() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeEmbarque() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeEmbarqueMaterial() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeInventario() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            EmbInvDataSet ds = new EmbInvDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void BulkRowChangeEventHandler(object sender, BulkRowChangeEvent e);
        
        public delegate void CatInventarioRowChangeEventHandler(object sender, CatInventarioRowChangeEvent e);
        
        public delegate void CatMaterialRowChangeEventHandler(object sender, CatMaterialRowChangeEvent e);
        
        public delegate void CatMaterialNoRowChangeEventHandler(object sender, CatMaterialNoRowChangeEvent e);
        
        public delegate void catUsuariosRowChangeEventHandler(object sender, catUsuariosRowChangeEvent e);
        
        public delegate void EmbarqueRowChangeEventHandler(object sender, EmbarqueRowChangeEvent e);
        
        public delegate void EmbarqueMaterialRowChangeEventHandler(object sender, EmbarqueMaterialRowChangeEvent e);
        
        public delegate void InventarioRowChangeEventHandler(object sender, InventarioRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class BulkDataTable : global::System.Data.TypedTableBase<BulkRow> {
            
            private global::System.Data.DataColumn columnid;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BulkDataTable() {
                this.TableName = "Bulk";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BulkDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BulkRow this[int index] {
                get {
                    return ((BulkRow)(this.Rows[index]));
                }
            }
            
            public event BulkRowChangeEventHandler BulkRowChanging;
            
            public event BulkRowChangeEventHandler BulkRowChanged;
            
            public event BulkRowChangeEventHandler BulkRowDeleting;
            
            public event BulkRowChangeEventHandler BulkRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddBulkRow(BulkRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BulkRow AddBulkRow(int id) {
                BulkRow rowBulkRow = ((BulkRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        id};
                rowBulkRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowBulkRow);
                return rowBulkRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                BulkDataTable cln = ((BulkDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new BulkDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new global::System.Data.DataColumn("id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnid);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BulkRow NewBulkRow() {
                return ((BulkRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new BulkRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(BulkRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BulkRowChanged != null)) {
                    this.BulkRowChanged(this, new BulkRowChangeEvent(((BulkRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BulkRowChanging != null)) {
                    this.BulkRowChanging(this, new BulkRowChangeEvent(((BulkRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BulkRowDeleted != null)) {
                    this.BulkRowDeleted(this, new BulkRowChangeEvent(((BulkRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BulkRowDeleting != null)) {
                    this.BulkRowDeleting(this, new BulkRowChangeEvent(((BulkRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveBulkRow(BulkRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                EmbInvDataSet ds = new EmbInvDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "BulkDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CatInventarioDataTable : global::System.Data.TypedTableBase<CatInventarioRow> {
            
            private global::System.Data.DataColumn columnId;
            
            private global::System.Data.DataColumn columnCB;
            
            private global::System.Data.DataColumn columnMedida;
            
            private global::System.Data.DataColumn columnAlmacen;
            
            private global::System.Data.DataColumn columnLote;
            
            private global::System.Data.DataColumn columnLongitud;
            
            private global::System.Data.DataColumn columnNorma;
            
            private global::System.Data.DataColumn columnEspesor;
            
            private global::System.Data.DataColumn columnDescripcion;
            
            private global::System.Data.DataColumn columnubicacion;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CatInventarioDataTable() {
                this.TableName = "CatInventario";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CatInventarioDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CBColumn {
                get {
                    return this.columnCB;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MedidaColumn {
                get {
                    return this.columnMedida;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AlmacenColumn {
                get {
                    return this.columnAlmacen;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LoteColumn {
                get {
                    return this.columnLote;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LongitudColumn {
                get {
                    return this.columnLongitud;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NormaColumn {
                get {
                    return this.columnNorma;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EspesorColumn {
                get {
                    return this.columnEspesor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescripcionColumn {
                get {
                    return this.columnDescripcion;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ubicacionColumn {
                get {
                    return this.columnubicacion;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CatInventarioRow this[int index] {
                get {
                    return ((CatInventarioRow)(this.Rows[index]));
                }
            }
            
            public event CatInventarioRowChangeEventHandler CatInventarioRowChanging;
            
            public event CatInventarioRowChangeEventHandler CatInventarioRowChanged;
            
            public event CatInventarioRowChangeEventHandler CatInventarioRowDeleting;
            
            public event CatInventarioRowChangeEventHandler CatInventarioRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCatInventarioRow(CatInventarioRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CatInventarioRow AddCatInventarioRow(int Id, string CB, string Medida, string Almacen, string Lote, string Longitud, string Norma, string Espesor, string Descripcion, string ubicacion) {
                CatInventarioRow rowCatInventarioRow = ((CatInventarioRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Id,
                        CB,
                        Medida,
                        Almacen,
                        Lote,
                        Longitud,
                        Norma,
                        Espesor,
                        Descripcion,
                        ubicacion};
                rowCatInventarioRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCatInventarioRow);
                return rowCatInventarioRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CatInventarioDataTable cln = ((CatInventarioDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CatInventarioDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnId = base.Columns["Id"];
                this.columnCB = base.Columns["CB"];
                this.columnMedida = base.Columns["Medida"];
                this.columnAlmacen = base.Columns["Almacen"];
                this.columnLote = base.Columns["Lote"];
                this.columnLongitud = base.Columns["Longitud"];
                this.columnNorma = base.Columns["Norma"];
                this.columnEspesor = base.Columns["Espesor"];
                this.columnDescripcion = base.Columns["Descripcion"];
                this.columnubicacion = base.Columns["ubicacion"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnId = new global::System.Data.DataColumn("Id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnId);
                this.columnCB = new global::System.Data.DataColumn("CB", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCB);
                this.columnMedida = new global::System.Data.DataColumn("Medida", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMedida);
                this.columnAlmacen = new global::System.Data.DataColumn("Almacen", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAlmacen);
                this.columnLote = new global::System.Data.DataColumn("Lote", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLote);
                this.columnLongitud = new global::System.Data.DataColumn("Longitud", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLongitud);
                this.columnNorma = new global::System.Data.DataColumn("Norma", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNorma);
                this.columnEspesor = new global::System.Data.DataColumn("Espesor", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEspesor);
                this.columnDescripcion = new global::System.Data.DataColumn("Descripcion", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescripcion);
                this.columnubicacion = new global::System.Data.DataColumn("ubicacion", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnubicacion);
                this.columnCB.MaxLength = 25;
                this.columnMedida.MaxLength = 50;
                this.columnAlmacen.MaxLength = 50;
                this.columnLote.MaxLength = 50;
                this.columnLongitud.MaxLength = 50;
                this.columnNorma.MaxLength = 50;
                this.columnEspesor.MaxLength = 50;
                this.columnDescripcion.MaxLength = 100;
                this.columnubicacion.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CatInventarioRow NewCatInventarioRow() {
                return ((CatInventarioRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CatInventarioRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CatInventarioRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CatInventarioRowChanged != null)) {
                    this.CatInventarioRowChanged(this, new CatInventarioRowChangeEvent(((CatInventarioRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CatInventarioRowChanging != null)) {
                    this.CatInventarioRowChanging(this, new CatInventarioRowChangeEvent(((CatInventarioRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CatInventarioRowDeleted != null)) {
                    this.CatInventarioRowDeleted(this, new CatInventarioRowChangeEvent(((CatInventarioRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CatInventarioRowDeleting != null)) {
                    this.CatInventarioRowDeleting(this, new CatInventarioRowChangeEvent(((CatInventarioRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCatInventarioRow(CatInventarioRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                EmbInvDataSet ds = new EmbInvDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CatInventarioDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CatMaterialDataTable : global::System.Data.TypedTableBase<CatMaterialRow> {
            
            private global::System.Data.DataColumn columnCodigoArticulo;
            
            private global::System.Data.DataColumn columnMedida;
            
            private global::System.Data.DataColumn columnAlmacen;
            
            private global::System.Data.DataColumn columnLote;
            
            private global::System.Data.DataColumn columnLongitud;
            
            private global::System.Data.DataColumn columnNorma;
            
            private global::System.Data.DataColumn columnEspesor;
            
            private global::System.Data.DataColumn columnDescripcion;
            
            private global::System.Data.DataColumn columnPesoTeorico;
            
            private global::System.Data.DataColumn columnIdSalidaDatos;
            
            private global::System.Data.DataColumn columnubicacion;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CatMaterialDataTable() {
                this.TableName = "CatMaterial";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CatMaterialDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CodigoArticuloColumn {
                get {
                    return this.columnCodigoArticulo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MedidaColumn {
                get {
                    return this.columnMedida;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AlmacenColumn {
                get {
                    return this.columnAlmacen;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LoteColumn {
                get {
                    return this.columnLote;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LongitudColumn {
                get {
                    return this.columnLongitud;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NormaColumn {
                get {
                    return this.columnNorma;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EspesorColumn {
                get {
                    return this.columnEspesor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescripcionColumn {
                get {
                    return this.columnDescripcion;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PesoTeoricoColumn {
                get {
                    return this.columnPesoTeorico;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IdSalidaDatosColumn {
                get {
                    return this.columnIdSalidaDatos;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ubicacionColumn {
                get {
                    return this.columnubicacion;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CatMaterialRow this[int index] {
                get {
                    return ((CatMaterialRow)(this.Rows[index]));
                }
            }
            
            public event CatMaterialRowChangeEventHandler CatMaterialRowChanging;
            
            public event CatMaterialRowChangeEventHandler CatMaterialRowChanged;
            
            public event CatMaterialRowChangeEventHandler CatMaterialRowDeleting;
            
            public event CatMaterialRowChangeEventHandler CatMaterialRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCatMaterialRow(CatMaterialRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CatMaterialRow AddCatMaterialRow(string CodigoArticulo, string Medida, string Almacen, string Lote, string Longitud, string Norma, string Espesor, string Descripcion, double PesoTeorico, int IdSalidaDatos, string ubicacion) {
                CatMaterialRow rowCatMaterialRow = ((CatMaterialRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CodigoArticulo,
                        Medida,
                        Almacen,
                        Lote,
                        Longitud,
                        Norma,
                        Espesor,
                        Descripcion,
                        PesoTeorico,
                        IdSalidaDatos,
                        ubicacion};
                rowCatMaterialRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCatMaterialRow);
                return rowCatMaterialRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CatMaterialDataTable cln = ((CatMaterialDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CatMaterialDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCodigoArticulo = base.Columns["CodigoArticulo"];
                this.columnMedida = base.Columns["Medida"];
                this.columnAlmacen = base.Columns["Almacen"];
                this.columnLote = base.Columns["Lote"];
                this.columnLongitud = base.Columns["Longitud"];
                this.columnNorma = base.Columns["Norma"];
                this.columnEspesor = base.Columns["Espesor"];
                this.columnDescripcion = base.Columns["Descripcion"];
                this.columnPesoTeorico = base.Columns["PesoTeorico"];
                this.columnIdSalidaDatos = base.Columns["IdSalidaDatos"];
                this.columnubicacion = base.Columns["ubicacion"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCodigoArticulo = new global::System.Data.DataColumn("CodigoArticulo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCodigoArticulo);
                this.columnMedida = new global::System.Data.DataColumn("Medida", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMedida);
                this.columnAlmacen = new global::System.Data.DataColumn("Almacen", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAlmacen);
                this.columnLote = new global::System.Data.DataColumn("Lote", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLote);
                this.columnLongitud = new global::System.Data.DataColumn("Longitud", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLongitud);
                this.columnNorma = new global::System.Data.DataColumn("Norma", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNorma);
                this.columnEspesor = new global::System.Data.DataColumn("Espesor", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEspesor);
                this.columnDescripcion = new global::System.Data.DataColumn("Descripcion", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescripcion);
                this.columnPesoTeorico = new global::System.Data.DataColumn("PesoTeorico", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPesoTeorico);
                this.columnIdSalidaDatos = new global::System.Data.DataColumn("IdSalidaDatos", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIdSalidaDatos);
                this.columnubicacion = new global::System.Data.DataColumn("ubicacion", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnubicacion);
                this.columnCodigoArticulo.AllowDBNull = false;
                this.columnCodigoArticulo.MaxLength = 25;
                this.columnMedida.MaxLength = 50;
                this.columnAlmacen.MaxLength = 50;
                this.columnLote.MaxLength = 50;
                this.columnLongitud.MaxLength = 50;
                this.columnNorma.MaxLength = 50;
                this.columnEspesor.MaxLength = 50;
                this.columnDescripcion.AllowDBNull = false;
                this.columnDescripcion.MaxLength = 70;
                this.columnubicacion.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CatMaterialRow NewCatMaterialRow() {
                return ((CatMaterialRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CatMaterialRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CatMaterialRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CatMaterialRowChanged != null)) {
                    this.CatMaterialRowChanged(this, new CatMaterialRowChangeEvent(((CatMaterialRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CatMaterialRowChanging != null)) {
                    this.CatMaterialRowChanging(this, new CatMaterialRowChangeEvent(((CatMaterialRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CatMaterialRowDeleted != null)) {
                    this.CatMaterialRowDeleted(this, new CatMaterialRowChangeEvent(((CatMaterialRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CatMaterialRowDeleting != null)) {
                    this.CatMaterialRowDeleting(this, new CatMaterialRowChangeEvent(((CatMaterialRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCatMaterialRow(CatMaterialRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                EmbInvDataSet ds = new EmbInvDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CatMaterialDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CatMaterialNoDataTable : global::System.Data.TypedTableBase<CatMaterialNoRow> {
            
            private global::System.Data.DataColumn columnIdMaterial;
            
            private global::System.Data.DataColumn columnCodigoBarras;
            
            private global::System.Data.DataColumn columnDescripcion;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CatMaterialNoDataTable() {
                this.TableName = "CatMaterialNo";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CatMaterialNoDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IdMaterialColumn {
                get {
                    return this.columnIdMaterial;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CodigoBarrasColumn {
                get {
                    return this.columnCodigoBarras;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescripcionColumn {
                get {
                    return this.columnDescripcion;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CatMaterialNoRow this[int index] {
                get {
                    return ((CatMaterialNoRow)(this.Rows[index]));
                }
            }
            
            public event CatMaterialNoRowChangeEventHandler CatMaterialNoRowChanging;
            
            public event CatMaterialNoRowChangeEventHandler CatMaterialNoRowChanged;
            
            public event CatMaterialNoRowChangeEventHandler CatMaterialNoRowDeleting;
            
            public event CatMaterialNoRowChangeEventHandler CatMaterialNoRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCatMaterialNoRow(CatMaterialNoRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CatMaterialNoRow AddCatMaterialNoRow(string CodigoBarras, string Descripcion) {
                CatMaterialNoRow rowCatMaterialNoRow = ((CatMaterialNoRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        CodigoBarras,
                        Descripcion};
                rowCatMaterialNoRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCatMaterialNoRow);
                return rowCatMaterialNoRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CatMaterialNoDataTable cln = ((CatMaterialNoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CatMaterialNoDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnIdMaterial = base.Columns["IdMaterial"];
                this.columnCodigoBarras = base.Columns["CodigoBarras"];
                this.columnDescripcion = base.Columns["Descripcion"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnIdMaterial = new global::System.Data.DataColumn("IdMaterial", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIdMaterial);
                this.columnCodigoBarras = new global::System.Data.DataColumn("CodigoBarras", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCodigoBarras);
                this.columnDescripcion = new global::System.Data.DataColumn("Descripcion", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescripcion);
                this.columnIdMaterial.AutoIncrement = true;
                this.columnIdMaterial.AutoIncrementSeed = -1;
                this.columnIdMaterial.AutoIncrementStep = -1;
                this.columnIdMaterial.AllowDBNull = false;
                this.columnIdMaterial.ReadOnly = true;
                this.columnCodigoBarras.AllowDBNull = false;
                this.columnCodigoBarras.MaxLength = 20;
                this.columnDescripcion.MaxLength = 100;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CatMaterialNoRow NewCatMaterialNoRow() {
                return ((CatMaterialNoRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CatMaterialNoRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CatMaterialNoRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CatMaterialNoRowChanged != null)) {
                    this.CatMaterialNoRowChanged(this, new CatMaterialNoRowChangeEvent(((CatMaterialNoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CatMaterialNoRowChanging != null)) {
                    this.CatMaterialNoRowChanging(this, new CatMaterialNoRowChangeEvent(((CatMaterialNoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CatMaterialNoRowDeleted != null)) {
                    this.CatMaterialNoRowDeleted(this, new CatMaterialNoRowChangeEvent(((CatMaterialNoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CatMaterialNoRowDeleting != null)) {
                    this.CatMaterialNoRowDeleting(this, new CatMaterialNoRowChangeEvent(((CatMaterialNoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCatMaterialNoRow(CatMaterialNoRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                EmbInvDataSet ds = new EmbInvDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CatMaterialNoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class catUsuariosDataTable : global::System.Data.TypedTableBase<catUsuariosRow> {
            
            private global::System.Data.DataColumn columnIdUsuario;
            
            private global::System.Data.DataColumn columnusuario;
            
            private global::System.Data.DataColumn columncontrasena;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public catUsuariosDataTable() {
                this.TableName = "catUsuarios";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal catUsuariosDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IdUsuarioColumn {
                get {
                    return this.columnIdUsuario;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn usuarioColumn {
                get {
                    return this.columnusuario;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn contrasenaColumn {
                get {
                    return this.columncontrasena;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public catUsuariosRow this[int index] {
                get {
                    return ((catUsuariosRow)(this.Rows[index]));
                }
            }
            
            public event catUsuariosRowChangeEventHandler catUsuariosRowChanging;
            
            public event catUsuariosRowChangeEventHandler catUsuariosRowChanged;
            
            public event catUsuariosRowChangeEventHandler catUsuariosRowDeleting;
            
            public event catUsuariosRowChangeEventHandler catUsuariosRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddcatUsuariosRow(catUsuariosRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public catUsuariosRow AddcatUsuariosRow(string usuario, string contrasena) {
                catUsuariosRow rowcatUsuariosRow = ((catUsuariosRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        usuario,
                        contrasena};
                rowcatUsuariosRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowcatUsuariosRow);
                return rowcatUsuariosRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                catUsuariosDataTable cln = ((catUsuariosDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new catUsuariosDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnIdUsuario = base.Columns["IdUsuario"];
                this.columnusuario = base.Columns["usuario"];
                this.columncontrasena = base.Columns["contrasena"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnIdUsuario = new global::System.Data.DataColumn("IdUsuario", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIdUsuario);
                this.columnusuario = new global::System.Data.DataColumn("usuario", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnusuario);
                this.columncontrasena = new global::System.Data.DataColumn("contrasena", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncontrasena);
                this.columnIdUsuario.AutoIncrement = true;
                this.columnIdUsuario.AutoIncrementSeed = -1;
                this.columnIdUsuario.AutoIncrementStep = -1;
                this.columnIdUsuario.AllowDBNull = false;
                this.columnIdUsuario.ReadOnly = true;
                this.columnusuario.AllowDBNull = false;
                this.columnusuario.MaxLength = 100;
                this.columncontrasena.AllowDBNull = false;
                this.columncontrasena.MaxLength = 100;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public catUsuariosRow NewcatUsuariosRow() {
                return ((catUsuariosRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new catUsuariosRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(catUsuariosRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.catUsuariosRowChanged != null)) {
                    this.catUsuariosRowChanged(this, new catUsuariosRowChangeEvent(((catUsuariosRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.catUsuariosRowChanging != null)) {
                    this.catUsuariosRowChanging(this, new catUsuariosRowChangeEvent(((catUsuariosRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.catUsuariosRowDeleted != null)) {
                    this.catUsuariosRowDeleted(this, new catUsuariosRowChangeEvent(((catUsuariosRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.catUsuariosRowDeleting != null)) {
                    this.catUsuariosRowDeleting(this, new catUsuariosRowChangeEvent(((catUsuariosRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovecatUsuariosRow(catUsuariosRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                EmbInvDataSet ds = new EmbInvDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "catUsuariosDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class EmbarqueDataTable : global::System.Data.TypedTableBase<EmbarqueRow> {
            
            private global::System.Data.DataColumn columnIdEmbarque;
            
            private global::System.Data.DataColumn columnDescripcion;
            
            private global::System.Data.DataColumn columnPeso;
            
            private global::System.Data.DataColumn columnFechaAlta;
            
            private global::System.Data.DataColumn columnLLeno;
            
            private global::System.Data.DataColumn columnIdUsuario;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmbarqueDataTable() {
                this.TableName = "Embarque";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EmbarqueDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IdEmbarqueColumn {
                get {
                    return this.columnIdEmbarque;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescripcionColumn {
                get {
                    return this.columnDescripcion;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PesoColumn {
                get {
                    return this.columnPeso;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FechaAltaColumn {
                get {
                    return this.columnFechaAlta;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LLenoColumn {
                get {
                    return this.columnLLeno;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IdUsuarioColumn {
                get {
                    return this.columnIdUsuario;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmbarqueRow this[int index] {
                get {
                    return ((EmbarqueRow)(this.Rows[index]));
                }
            }
            
            public event EmbarqueRowChangeEventHandler EmbarqueRowChanging;
            
            public event EmbarqueRowChangeEventHandler EmbarqueRowChanged;
            
            public event EmbarqueRowChangeEventHandler EmbarqueRowDeleting;
            
            public event EmbarqueRowChangeEventHandler EmbarqueRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddEmbarqueRow(EmbarqueRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmbarqueRow AddEmbarqueRow(string Descripcion, double Peso, string FechaAlta, bool LLeno, int IdUsuario) {
                EmbarqueRow rowEmbarqueRow = ((EmbarqueRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Descripcion,
                        Peso,
                        FechaAlta,
                        LLeno,
                        IdUsuario};
                rowEmbarqueRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowEmbarqueRow);
                return rowEmbarqueRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmbarqueRow FindByIdEmbarque(int IdEmbarque) {
                return ((EmbarqueRow)(this.Rows.Find(new object[] {
                            IdEmbarque})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                EmbarqueDataTable cln = ((EmbarqueDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new EmbarqueDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnIdEmbarque = base.Columns["IdEmbarque"];
                this.columnDescripcion = base.Columns["Descripcion"];
                this.columnPeso = base.Columns["Peso"];
                this.columnFechaAlta = base.Columns["FechaAlta"];
                this.columnLLeno = base.Columns["LLeno"];
                this.columnIdUsuario = base.Columns["IdUsuario"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnIdEmbarque = new global::System.Data.DataColumn("IdEmbarque", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIdEmbarque);
                this.columnDescripcion = new global::System.Data.DataColumn("Descripcion", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescripcion);
                this.columnPeso = new global::System.Data.DataColumn("Peso", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPeso);
                this.columnFechaAlta = new global::System.Data.DataColumn("FechaAlta", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFechaAlta);
                this.columnLLeno = new global::System.Data.DataColumn("LLeno", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLLeno);
                this.columnIdUsuario = new global::System.Data.DataColumn("IdUsuario", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIdUsuario);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnIdEmbarque}, true));
                this.columnIdEmbarque.AutoIncrement = true;
                this.columnIdEmbarque.AutoIncrementSeed = -1;
                this.columnIdEmbarque.AutoIncrementStep = -1;
                this.columnIdEmbarque.AllowDBNull = false;
                this.columnIdEmbarque.ReadOnly = true;
                this.columnIdEmbarque.Unique = true;
                this.columnDescripcion.MaxLength = 50;
                this.columnFechaAlta.MaxLength = 100;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmbarqueRow NewEmbarqueRow() {
                return ((EmbarqueRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new EmbarqueRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(EmbarqueRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EmbarqueRowChanged != null)) {
                    this.EmbarqueRowChanged(this, new EmbarqueRowChangeEvent(((EmbarqueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EmbarqueRowChanging != null)) {
                    this.EmbarqueRowChanging(this, new EmbarqueRowChangeEvent(((EmbarqueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EmbarqueRowDeleted != null)) {
                    this.EmbarqueRowDeleted(this, new EmbarqueRowChangeEvent(((EmbarqueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EmbarqueRowDeleting != null)) {
                    this.EmbarqueRowDeleting(this, new EmbarqueRowChangeEvent(((EmbarqueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveEmbarqueRow(EmbarqueRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                EmbInvDataSet ds = new EmbInvDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EmbarqueDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class EmbarqueMaterialDataTable : global::System.Data.TypedTableBase<EmbarqueMaterialRow> {
            
            private global::System.Data.DataColumn columnIdEmbarque;
            
            private global::System.Data.DataColumn columnCodigoBarras;
            
            private global::System.Data.DataColumn columnIdSalidaDatos;
            
            private global::System.Data.DataColumn columnPeso;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmbarqueMaterialDataTable() {
                this.TableName = "EmbarqueMaterial";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EmbarqueMaterialDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IdEmbarqueColumn {
                get {
                    return this.columnIdEmbarque;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CodigoBarrasColumn {
                get {
                    return this.columnCodigoBarras;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IdSalidaDatosColumn {
                get {
                    return this.columnIdSalidaDatos;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PesoColumn {
                get {
                    return this.columnPeso;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmbarqueMaterialRow this[int index] {
                get {
                    return ((EmbarqueMaterialRow)(this.Rows[index]));
                }
            }
            
            public event EmbarqueMaterialRowChangeEventHandler EmbarqueMaterialRowChanging;
            
            public event EmbarqueMaterialRowChangeEventHandler EmbarqueMaterialRowChanged;
            
            public event EmbarqueMaterialRowChangeEventHandler EmbarqueMaterialRowDeleting;
            
            public event EmbarqueMaterialRowChangeEventHandler EmbarqueMaterialRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddEmbarqueMaterialRow(EmbarqueMaterialRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmbarqueMaterialRow AddEmbarqueMaterialRow(int IdEmbarque, string CodigoBarras, int IdSalidaDatos, double Peso) {
                EmbarqueMaterialRow rowEmbarqueMaterialRow = ((EmbarqueMaterialRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        IdEmbarque,
                        CodigoBarras,
                        IdSalidaDatos,
                        Peso};
                rowEmbarqueMaterialRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowEmbarqueMaterialRow);
                return rowEmbarqueMaterialRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                EmbarqueMaterialDataTable cln = ((EmbarqueMaterialDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new EmbarqueMaterialDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnIdEmbarque = base.Columns["IdEmbarque"];
                this.columnCodigoBarras = base.Columns["CodigoBarras"];
                this.columnIdSalidaDatos = base.Columns["IdSalidaDatos"];
                this.columnPeso = base.Columns["Peso"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnIdEmbarque = new global::System.Data.DataColumn("IdEmbarque", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIdEmbarque);
                this.columnCodigoBarras = new global::System.Data.DataColumn("CodigoBarras", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCodigoBarras);
                this.columnIdSalidaDatos = new global::System.Data.DataColumn("IdSalidaDatos", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIdSalidaDatos);
                this.columnPeso = new global::System.Data.DataColumn("Peso", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPeso);
                this.columnIdEmbarque.AllowDBNull = false;
                this.columnCodigoBarras.AllowDBNull = false;
                this.columnCodigoBarras.MaxLength = 25;
                this.columnIdSalidaDatos.AllowDBNull = false;
                this.columnPeso.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmbarqueMaterialRow NewEmbarqueMaterialRow() {
                return ((EmbarqueMaterialRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new EmbarqueMaterialRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(EmbarqueMaterialRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EmbarqueMaterialRowChanged != null)) {
                    this.EmbarqueMaterialRowChanged(this, new EmbarqueMaterialRowChangeEvent(((EmbarqueMaterialRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EmbarqueMaterialRowChanging != null)) {
                    this.EmbarqueMaterialRowChanging(this, new EmbarqueMaterialRowChangeEvent(((EmbarqueMaterialRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EmbarqueMaterialRowDeleted != null)) {
                    this.EmbarqueMaterialRowDeleted(this, new EmbarqueMaterialRowChangeEvent(((EmbarqueMaterialRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EmbarqueMaterialRowDeleting != null)) {
                    this.EmbarqueMaterialRowDeleting(this, new EmbarqueMaterialRowChangeEvent(((EmbarqueMaterialRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveEmbarqueMaterialRow(EmbarqueMaterialRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                EmbInvDataSet ds = new EmbInvDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EmbarqueMaterialDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class InventarioDataTable : global::System.Data.TypedTableBase<InventarioRow> {
            
            private global::System.Data.DataColumn columnCodigoBarras;
            
            private global::System.Data.DataColumn columnCantidad;
            
            private global::System.Data.DataColumn columnMedida;
            
            private global::System.Data.DataColumn columnAlmacen;
            
            private global::System.Data.DataColumn columnLote;
            
            private global::System.Data.DataColumn columnLongitud;
            
            private global::System.Data.DataColumn columnNorma;
            
            private global::System.Data.DataColumn columnEspesor;
            
            private global::System.Data.DataColumn columnDescripcion;
            
            private global::System.Data.DataColumn columnubicacion;
            
            private global::System.Data.DataColumn columnidUsuario;
            
            private global::System.Data.DataColumn columnIdArticulo;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InventarioDataTable() {
                this.TableName = "Inventario";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InventarioDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CodigoBarrasColumn {
                get {
                    return this.columnCodigoBarras;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CantidadColumn {
                get {
                    return this.columnCantidad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MedidaColumn {
                get {
                    return this.columnMedida;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AlmacenColumn {
                get {
                    return this.columnAlmacen;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LoteColumn {
                get {
                    return this.columnLote;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LongitudColumn {
                get {
                    return this.columnLongitud;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NormaColumn {
                get {
                    return this.columnNorma;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EspesorColumn {
                get {
                    return this.columnEspesor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescripcionColumn {
                get {
                    return this.columnDescripcion;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ubicacionColumn {
                get {
                    return this.columnubicacion;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn idUsuarioColumn {
                get {
                    return this.columnidUsuario;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IdArticuloColumn {
                get {
                    return this.columnIdArticulo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InventarioRow this[int index] {
                get {
                    return ((InventarioRow)(this.Rows[index]));
                }
            }
            
            public event InventarioRowChangeEventHandler InventarioRowChanging;
            
            public event InventarioRowChangeEventHandler InventarioRowChanged;
            
            public event InventarioRowChangeEventHandler InventarioRowDeleting;
            
            public event InventarioRowChangeEventHandler InventarioRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddInventarioRow(InventarioRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InventarioRow AddInventarioRow(string CodigoBarras, int Cantidad, string Medida, string Almacen, string Lote, string Longitud, string Norma, string Espesor, string Descripcion, string ubicacion, int idUsuario, int IdArticulo) {
                InventarioRow rowInventarioRow = ((InventarioRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CodigoBarras,
                        Cantidad,
                        Medida,
                        Almacen,
                        Lote,
                        Longitud,
                        Norma,
                        Espesor,
                        Descripcion,
                        ubicacion,
                        idUsuario,
                        IdArticulo};
                rowInventarioRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowInventarioRow);
                return rowInventarioRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                InventarioDataTable cln = ((InventarioDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new InventarioDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCodigoBarras = base.Columns["CodigoBarras"];
                this.columnCantidad = base.Columns["Cantidad"];
                this.columnMedida = base.Columns["Medida"];
                this.columnAlmacen = base.Columns["Almacen"];
                this.columnLote = base.Columns["Lote"];
                this.columnLongitud = base.Columns["Longitud"];
                this.columnNorma = base.Columns["Norma"];
                this.columnEspesor = base.Columns["Espesor"];
                this.columnDescripcion = base.Columns["Descripcion"];
                this.columnubicacion = base.Columns["ubicacion"];
                this.columnidUsuario = base.Columns["idUsuario"];
                this.columnIdArticulo = base.Columns["IdArticulo"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCodigoBarras = new global::System.Data.DataColumn("CodigoBarras", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCodigoBarras);
                this.columnCantidad = new global::System.Data.DataColumn("Cantidad", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCantidad);
                this.columnMedida = new global::System.Data.DataColumn("Medida", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMedida);
                this.columnAlmacen = new global::System.Data.DataColumn("Almacen", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAlmacen);
                this.columnLote = new global::System.Data.DataColumn("Lote", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLote);
                this.columnLongitud = new global::System.Data.DataColumn("Longitud", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLongitud);
                this.columnNorma = new global::System.Data.DataColumn("Norma", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNorma);
                this.columnEspesor = new global::System.Data.DataColumn("Espesor", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEspesor);
                this.columnDescripcion = new global::System.Data.DataColumn("Descripcion", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescripcion);
                this.columnubicacion = new global::System.Data.DataColumn("ubicacion", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnubicacion);
                this.columnidUsuario = new global::System.Data.DataColumn("idUsuario", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnidUsuario);
                this.columnIdArticulo = new global::System.Data.DataColumn("IdArticulo", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIdArticulo);
                this.columnCodigoBarras.AllowDBNull = false;
                this.columnCodigoBarras.MaxLength = 25;
                this.columnCantidad.AllowDBNull = false;
                this.columnMedida.MaxLength = 100;
                this.columnAlmacen.MaxLength = 100;
                this.columnLote.MaxLength = 100;
                this.columnLongitud.MaxLength = 100;
                this.columnNorma.MaxLength = 100;
                this.columnEspesor.MaxLength = 100;
                this.columnDescripcion.MaxLength = 100;
                this.columnubicacion.MaxLength = 100;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InventarioRow NewInventarioRow() {
                return ((InventarioRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new InventarioRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(InventarioRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.InventarioRowChanged != null)) {
                    this.InventarioRowChanged(this, new InventarioRowChangeEvent(((InventarioRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.InventarioRowChanging != null)) {
                    this.InventarioRowChanging(this, new InventarioRowChangeEvent(((InventarioRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.InventarioRowDeleted != null)) {
                    this.InventarioRowDeleted(this, new InventarioRowChangeEvent(((InventarioRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.InventarioRowDeleting != null)) {
                    this.InventarioRowDeleting(this, new InventarioRowChangeEvent(((InventarioRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveInventarioRow(InventarioRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                EmbInvDataSet ds = new EmbInvDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "InventarioDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class BulkRow : global::System.Data.DataRow {
            
            private BulkDataTable tableBulk;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BulkRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableBulk = ((BulkDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int id {
                get {
                    try {
                        return ((int)(this[this.tableBulk.idColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'id\' in table \'Bulk\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBulk.idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsidNull() {
                return this.IsNull(this.tableBulk.idColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetidNull() {
                this[this.tableBulk.idColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class CatInventarioRow : global::System.Data.DataRow {
            
            private CatInventarioDataTable tableCatInventario;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CatInventarioRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCatInventario = ((CatInventarioDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Id {
                get {
                    try {
                        return ((int)(this[this.tableCatInventario.IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Id\' in table \'CatInventario\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCatInventario.IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CB {
                get {
                    try {
                        return ((string)(this[this.tableCatInventario.CBColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CB\' in table \'CatInventario\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCatInventario.CBColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Medida {
                get {
                    try {
                        return ((string)(this[this.tableCatInventario.MedidaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Medida\' in table \'CatInventario\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCatInventario.MedidaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Almacen {
                get {
                    try {
                        return ((string)(this[this.tableCatInventario.AlmacenColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Almacen\' in table \'CatInventario\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCatInventario.AlmacenColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Lote {
                get {
                    try {
                        return ((string)(this[this.tableCatInventario.LoteColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Lote\' in table \'CatInventario\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCatInventario.LoteColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Longitud {
                get {
                    try {
                        return ((string)(this[this.tableCatInventario.LongitudColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Longitud\' in table \'CatInventario\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCatInventario.LongitudColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Norma {
                get {
                    try {
                        return ((string)(this[this.tableCatInventario.NormaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Norma\' in table \'CatInventario\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCatInventario.NormaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Espesor {
                get {
                    try {
                        return ((string)(this[this.tableCatInventario.EspesorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Espesor\' in table \'CatInventario\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCatInventario.EspesorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Descripcion {
                get {
                    try {
                        return ((string)(this[this.tableCatInventario.DescripcionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Descripcion\' in table \'CatInventario\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCatInventario.DescripcionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ubicacion {
                get {
                    try {
                        return ((string)(this[this.tableCatInventario.ubicacionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ubicacion\' in table \'CatInventario\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCatInventario.ubicacionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIdNull() {
                return this.IsNull(this.tableCatInventario.IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIdNull() {
                this[this.tableCatInventario.IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCBNull() {
                return this.IsNull(this.tableCatInventario.CBColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCBNull() {
                this[this.tableCatInventario.CBColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMedidaNull() {
                return this.IsNull(this.tableCatInventario.MedidaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMedidaNull() {
                this[this.tableCatInventario.MedidaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAlmacenNull() {
                return this.IsNull(this.tableCatInventario.AlmacenColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAlmacenNull() {
                this[this.tableCatInventario.AlmacenColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLoteNull() {
                return this.IsNull(this.tableCatInventario.LoteColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLoteNull() {
                this[this.tableCatInventario.LoteColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLongitudNull() {
                return this.IsNull(this.tableCatInventario.LongitudColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLongitudNull() {
                this[this.tableCatInventario.LongitudColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNormaNull() {
                return this.IsNull(this.tableCatInventario.NormaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNormaNull() {
                this[this.tableCatInventario.NormaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEspesorNull() {
                return this.IsNull(this.tableCatInventario.EspesorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEspesorNull() {
                this[this.tableCatInventario.EspesorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescripcionNull() {
                return this.IsNull(this.tableCatInventario.DescripcionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescripcionNull() {
                this[this.tableCatInventario.DescripcionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsubicacionNull() {
                return this.IsNull(this.tableCatInventario.ubicacionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetubicacionNull() {
                this[this.tableCatInventario.ubicacionColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class CatMaterialRow : global::System.Data.DataRow {
            
            private CatMaterialDataTable tableCatMaterial;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CatMaterialRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCatMaterial = ((CatMaterialDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CodigoArticulo {
                get {
                    return ((string)(this[this.tableCatMaterial.CodigoArticuloColumn]));
                }
                set {
                    this[this.tableCatMaterial.CodigoArticuloColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Medida {
                get {
                    try {
                        return ((string)(this[this.tableCatMaterial.MedidaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Medida\' in table \'CatMaterial\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCatMaterial.MedidaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Almacen {
                get {
                    try {
                        return ((string)(this[this.tableCatMaterial.AlmacenColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Almacen\' in table \'CatMaterial\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCatMaterial.AlmacenColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Lote {
                get {
                    try {
                        return ((string)(this[this.tableCatMaterial.LoteColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Lote\' in table \'CatMaterial\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCatMaterial.LoteColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Longitud {
                get {
                    try {
                        return ((string)(this[this.tableCatMaterial.LongitudColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Longitud\' in table \'CatMaterial\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCatMaterial.LongitudColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Norma {
                get {
                    try {
                        return ((string)(this[this.tableCatMaterial.NormaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Norma\' in table \'CatMaterial\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCatMaterial.NormaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Espesor {
                get {
                    try {
                        return ((string)(this[this.tableCatMaterial.EspesorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Espesor\' in table \'CatMaterial\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCatMaterial.EspesorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Descripcion {
                get {
                    return ((string)(this[this.tableCatMaterial.DescripcionColumn]));
                }
                set {
                    this[this.tableCatMaterial.DescripcionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double PesoTeorico {
                get {
                    try {
                        return ((double)(this[this.tableCatMaterial.PesoTeoricoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PesoTeorico\' in table \'CatMaterial\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCatMaterial.PesoTeoricoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IdSalidaDatos {
                get {
                    try {
                        return ((int)(this[this.tableCatMaterial.IdSalidaDatosColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IdSalidaDatos\' in table \'CatMaterial\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCatMaterial.IdSalidaDatosColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ubicacion {
                get {
                    try {
                        return ((string)(this[this.tableCatMaterial.ubicacionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ubicacion\' in table \'CatMaterial\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCatMaterial.ubicacionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMedidaNull() {
                return this.IsNull(this.tableCatMaterial.MedidaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMedidaNull() {
                this[this.tableCatMaterial.MedidaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAlmacenNull() {
                return this.IsNull(this.tableCatMaterial.AlmacenColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAlmacenNull() {
                this[this.tableCatMaterial.AlmacenColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLoteNull() {
                return this.IsNull(this.tableCatMaterial.LoteColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLoteNull() {
                this[this.tableCatMaterial.LoteColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLongitudNull() {
                return this.IsNull(this.tableCatMaterial.LongitudColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLongitudNull() {
                this[this.tableCatMaterial.LongitudColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNormaNull() {
                return this.IsNull(this.tableCatMaterial.NormaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNormaNull() {
                this[this.tableCatMaterial.NormaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEspesorNull() {
                return this.IsNull(this.tableCatMaterial.EspesorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEspesorNull() {
                this[this.tableCatMaterial.EspesorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPesoTeoricoNull() {
                return this.IsNull(this.tableCatMaterial.PesoTeoricoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPesoTeoricoNull() {
                this[this.tableCatMaterial.PesoTeoricoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIdSalidaDatosNull() {
                return this.IsNull(this.tableCatMaterial.IdSalidaDatosColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIdSalidaDatosNull() {
                this[this.tableCatMaterial.IdSalidaDatosColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsubicacionNull() {
                return this.IsNull(this.tableCatMaterial.ubicacionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetubicacionNull() {
                this[this.tableCatMaterial.ubicacionColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class CatMaterialNoRow : global::System.Data.DataRow {
            
            private CatMaterialNoDataTable tableCatMaterialNo;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CatMaterialNoRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCatMaterialNo = ((CatMaterialNoDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IdMaterial {
                get {
                    return ((int)(this[this.tableCatMaterialNo.IdMaterialColumn]));
                }
                set {
                    this[this.tableCatMaterialNo.IdMaterialColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CodigoBarras {
                get {
                    return ((string)(this[this.tableCatMaterialNo.CodigoBarrasColumn]));
                }
                set {
                    this[this.tableCatMaterialNo.CodigoBarrasColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Descripcion {
                get {
                    try {
                        return ((string)(this[this.tableCatMaterialNo.DescripcionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Descripcion\' in table \'CatMaterialNo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCatMaterialNo.DescripcionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescripcionNull() {
                return this.IsNull(this.tableCatMaterialNo.DescripcionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescripcionNull() {
                this[this.tableCatMaterialNo.DescripcionColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class catUsuariosRow : global::System.Data.DataRow {
            
            private catUsuariosDataTable tablecatUsuarios;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal catUsuariosRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablecatUsuarios = ((catUsuariosDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IdUsuario {
                get {
                    return ((int)(this[this.tablecatUsuarios.IdUsuarioColumn]));
                }
                set {
                    this[this.tablecatUsuarios.IdUsuarioColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string usuario {
                get {
                    return ((string)(this[this.tablecatUsuarios.usuarioColumn]));
                }
                set {
                    this[this.tablecatUsuarios.usuarioColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string contrasena {
                get {
                    return ((string)(this[this.tablecatUsuarios.contrasenaColumn]));
                }
                set {
                    this[this.tablecatUsuarios.contrasenaColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class EmbarqueRow : global::System.Data.DataRow {
            
            private EmbarqueDataTable tableEmbarque;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EmbarqueRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEmbarque = ((EmbarqueDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IdEmbarque {
                get {
                    return ((int)(this[this.tableEmbarque.IdEmbarqueColumn]));
                }
                set {
                    this[this.tableEmbarque.IdEmbarqueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Descripcion {
                get {
                    try {
                        return ((string)(this[this.tableEmbarque.DescripcionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Descripcion\' in table \'Embarque\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmbarque.DescripcionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Peso {
                get {
                    try {
                        return ((double)(this[this.tableEmbarque.PesoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Peso\' in table \'Embarque\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmbarque.PesoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FechaAlta {
                get {
                    try {
                        return ((string)(this[this.tableEmbarque.FechaAltaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FechaAlta\' in table \'Embarque\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmbarque.FechaAltaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool LLeno {
                get {
                    try {
                        return ((bool)(this[this.tableEmbarque.LLenoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LLeno\' in table \'Embarque\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmbarque.LLenoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IdUsuario {
                get {
                    try {
                        return ((int)(this[this.tableEmbarque.IdUsuarioColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IdUsuario\' in table \'Embarque\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmbarque.IdUsuarioColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescripcionNull() {
                return this.IsNull(this.tableEmbarque.DescripcionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescripcionNull() {
                this[this.tableEmbarque.DescripcionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPesoNull() {
                return this.IsNull(this.tableEmbarque.PesoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPesoNull() {
                this[this.tableEmbarque.PesoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFechaAltaNull() {
                return this.IsNull(this.tableEmbarque.FechaAltaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFechaAltaNull() {
                this[this.tableEmbarque.FechaAltaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLLenoNull() {
                return this.IsNull(this.tableEmbarque.LLenoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLLenoNull() {
                this[this.tableEmbarque.LLenoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIdUsuarioNull() {
                return this.IsNull(this.tableEmbarque.IdUsuarioColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIdUsuarioNull() {
                this[this.tableEmbarque.IdUsuarioColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class EmbarqueMaterialRow : global::System.Data.DataRow {
            
            private EmbarqueMaterialDataTable tableEmbarqueMaterial;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EmbarqueMaterialRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEmbarqueMaterial = ((EmbarqueMaterialDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IdEmbarque {
                get {
                    return ((int)(this[this.tableEmbarqueMaterial.IdEmbarqueColumn]));
                }
                set {
                    this[this.tableEmbarqueMaterial.IdEmbarqueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CodigoBarras {
                get {
                    return ((string)(this[this.tableEmbarqueMaterial.CodigoBarrasColumn]));
                }
                set {
                    this[this.tableEmbarqueMaterial.CodigoBarrasColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IdSalidaDatos {
                get {
                    return ((int)(this[this.tableEmbarqueMaterial.IdSalidaDatosColumn]));
                }
                set {
                    this[this.tableEmbarqueMaterial.IdSalidaDatosColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Peso {
                get {
                    return ((double)(this[this.tableEmbarqueMaterial.PesoColumn]));
                }
                set {
                    this[this.tableEmbarqueMaterial.PesoColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class InventarioRow : global::System.Data.DataRow {
            
            private InventarioDataTable tableInventario;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InventarioRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableInventario = ((InventarioDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CodigoBarras {
                get {
                    return ((string)(this[this.tableInventario.CodigoBarrasColumn]));
                }
                set {
                    this[this.tableInventario.CodigoBarrasColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Cantidad {
                get {
                    return ((int)(this[this.tableInventario.CantidadColumn]));
                }
                set {
                    this[this.tableInventario.CantidadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Medida {
                get {
                    try {
                        return ((string)(this[this.tableInventario.MedidaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Medida\' in table \'Inventario\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInventario.MedidaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Almacen {
                get {
                    try {
                        return ((string)(this[this.tableInventario.AlmacenColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Almacen\' in table \'Inventario\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInventario.AlmacenColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Lote {
                get {
                    try {
                        return ((string)(this[this.tableInventario.LoteColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Lote\' in table \'Inventario\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInventario.LoteColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Longitud {
                get {
                    try {
                        return ((string)(this[this.tableInventario.LongitudColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Longitud\' in table \'Inventario\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInventario.LongitudColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Norma {
                get {
                    try {
                        return ((string)(this[this.tableInventario.NormaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Norma\' in table \'Inventario\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInventario.NormaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Espesor {
                get {
                    try {
                        return ((string)(this[this.tableInventario.EspesorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Espesor\' in table \'Inventario\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInventario.EspesorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Descripcion {
                get {
                    try {
                        return ((string)(this[this.tableInventario.DescripcionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Descripcion\' in table \'Inventario\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInventario.DescripcionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ubicacion {
                get {
                    try {
                        return ((string)(this[this.tableInventario.ubicacionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ubicacion\' in table \'Inventario\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInventario.ubicacionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int idUsuario {
                get {
                    try {
                        return ((int)(this[this.tableInventario.idUsuarioColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'idUsuario\' in table \'Inventario\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInventario.idUsuarioColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IdArticulo {
                get {
                    try {
                        return ((int)(this[this.tableInventario.IdArticuloColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IdArticulo\' in table \'Inventario\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInventario.IdArticuloColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMedidaNull() {
                return this.IsNull(this.tableInventario.MedidaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMedidaNull() {
                this[this.tableInventario.MedidaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAlmacenNull() {
                return this.IsNull(this.tableInventario.AlmacenColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAlmacenNull() {
                this[this.tableInventario.AlmacenColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLoteNull() {
                return this.IsNull(this.tableInventario.LoteColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLoteNull() {
                this[this.tableInventario.LoteColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLongitudNull() {
                return this.IsNull(this.tableInventario.LongitudColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLongitudNull() {
                this[this.tableInventario.LongitudColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNormaNull() {
                return this.IsNull(this.tableInventario.NormaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNormaNull() {
                this[this.tableInventario.NormaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEspesorNull() {
                return this.IsNull(this.tableInventario.EspesorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEspesorNull() {
                this[this.tableInventario.EspesorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescripcionNull() {
                return this.IsNull(this.tableInventario.DescripcionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescripcionNull() {
                this[this.tableInventario.DescripcionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsubicacionNull() {
                return this.IsNull(this.tableInventario.ubicacionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetubicacionNull() {
                this[this.tableInventario.ubicacionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsidUsuarioNull() {
                return this.IsNull(this.tableInventario.idUsuarioColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetidUsuarioNull() {
                this[this.tableInventario.idUsuarioColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIdArticuloNull() {
                return this.IsNull(this.tableInventario.IdArticuloColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIdArticuloNull() {
                this[this.tableInventario.IdArticuloColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        public class BulkRowChangeEvent : global::System.EventArgs {
            
            private BulkRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BulkRowChangeEvent(BulkRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BulkRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        public class CatInventarioRowChangeEvent : global::System.EventArgs {
            
            private CatInventarioRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CatInventarioRowChangeEvent(CatInventarioRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CatInventarioRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        public class CatMaterialRowChangeEvent : global::System.EventArgs {
            
            private CatMaterialRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CatMaterialRowChangeEvent(CatMaterialRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CatMaterialRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        public class CatMaterialNoRowChangeEvent : global::System.EventArgs {
            
            private CatMaterialNoRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CatMaterialNoRowChangeEvent(CatMaterialNoRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CatMaterialNoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        public class catUsuariosRowChangeEvent : global::System.EventArgs {
            
            private catUsuariosRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public catUsuariosRowChangeEvent(catUsuariosRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public catUsuariosRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        public class EmbarqueRowChangeEvent : global::System.EventArgs {
            
            private EmbarqueRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmbarqueRowChangeEvent(EmbarqueRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmbarqueRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        public class EmbarqueMaterialRowChangeEvent : global::System.EventArgs {
            
            private EmbarqueMaterialRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmbarqueMaterialRowChangeEvent(EmbarqueMaterialRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmbarqueMaterialRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        public class InventarioRowChangeEvent : global::System.EventArgs {
            
            private InventarioRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InventarioRowChangeEvent(InventarioRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InventarioRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace invsys.Mobile.Embarques.EmbInvDataSetTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    public partial class BulkTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlServerCe.SqlCeDataAdapter _adapter;
        
        private global::System.Data.SqlServerCe.SqlCeConnection _connection;
        
        private global::System.Data.SqlServerCe.SqlCeCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public BulkTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlServerCe.SqlCeDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlServerCe.SqlCeConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlServerCe.SqlCeCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlServerCe.SqlCeCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlServerCe.SqlCeDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Bulk";
            tableMapping.ColumnMappings.Add("id", "id");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [Bulk] ([id]) VALUES (@p1)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "id", global::System.Data.DataRowVersion.Current, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlServerCe.SqlCeConnection();
            this._connection.ConnectionString = ("Data Source =" 
                        + (System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().GetName().CodeBase) + "\\EmbInv.sdf;"));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlServerCe.SqlCeCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT [id] FROM [Bulk]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(EmbInvDataSet.BulkDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual EmbInvDataSet.BulkDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            EmbInvDataSet.BulkDataTable dataTable = new EmbInvDataSet.BulkDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(EmbInvDataSet.BulkDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(EmbInvDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Bulk");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(global::System.Nullable<int> p1) {
            if ((p1.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((int)(p1.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    public partial class CatInventarioTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlServerCe.SqlCeDataAdapter _adapter;
        
        private global::System.Data.SqlServerCe.SqlCeConnection _connection;
        
        private global::System.Data.SqlServerCe.SqlCeCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CatInventarioTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlServerCe.SqlCeDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlServerCe.SqlCeConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlServerCe.SqlCeCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlServerCe.SqlCeCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlServerCe.SqlCeDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "CatInventario";
            tableMapping.ColumnMappings.Add("Id", "Id");
            tableMapping.ColumnMappings.Add("CB", "CB");
            tableMapping.ColumnMappings.Add("Medida", "Medida");
            tableMapping.ColumnMappings.Add("Almacen", "Almacen");
            tableMapping.ColumnMappings.Add("Lote", "Lote");
            tableMapping.ColumnMappings.Add("Longitud", "Longitud");
            tableMapping.ColumnMappings.Add("Norma", "Norma");
            tableMapping.ColumnMappings.Add("Espesor", "Espesor");
            tableMapping.ColumnMappings.Add("Descripcion", "Descripcion");
            tableMapping.ColumnMappings.Add("ubicacion", "ubicacion");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [CatInventario] ([Id], [CB], [Medida], [Almacen], [Lote], [Longitud]," +
                " [Norma], [Espesor], [Descripcion], [ubicacion]) VALUES (@p1, @p2, @p3, @p4, @p5" +
                ", @p6, @p7, @p8, @p9, @p10)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Id", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p2", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "CB", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p3", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Medida", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p4", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Almacen", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p5", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Lote", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p6", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Longitud", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p7", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Norma", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p8", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Espesor", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p9", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Descripcion", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p10", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "ubicacion", global::System.Data.DataRowVersion.Current, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlServerCe.SqlCeConnection();
            this._connection.ConnectionString = ("Data Source =" 
                        + (System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().GetName().CodeBase) + "\\EmbInv.sdf;"));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlServerCe.SqlCeCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT [Id], [CB], [Medida], [Almacen], [Lote], [Longitud], [Norma], [Espesor], [" +
                "Descripcion], [ubicacion] FROM [CatInventario]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(EmbInvDataSet.CatInventarioDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual EmbInvDataSet.CatInventarioDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            EmbInvDataSet.CatInventarioDataTable dataTable = new EmbInvDataSet.CatInventarioDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(EmbInvDataSet.CatInventarioDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(EmbInvDataSet dataSet) {
            return this.Adapter.Update(dataSet, "CatInventario");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(global::System.Nullable<int> p1, string p2, string p3, string p4, string p5, string p6, string p7, string p8, string p9, string p10) {
            if ((p1.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((int)(p1.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((p2 == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(p2));
            }
            if ((p3 == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(p3));
            }
            if ((p4 == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(p4));
            }
            if ((p5 == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(p5));
            }
            if ((p6 == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(p6));
            }
            if ((p7 == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(p7));
            }
            if ((p8 == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(p8));
            }
            if ((p9 == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(p9));
            }
            if ((p10 == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(p10));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    public partial class CatMaterialTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlServerCe.SqlCeDataAdapter _adapter;
        
        private global::System.Data.SqlServerCe.SqlCeConnection _connection;
        
        private global::System.Data.SqlServerCe.SqlCeCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CatMaterialTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlServerCe.SqlCeDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlServerCe.SqlCeConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlServerCe.SqlCeCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlServerCe.SqlCeCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlServerCe.SqlCeDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "CatMaterial";
            tableMapping.ColumnMappings.Add("CodigoArticulo", "CodigoArticulo");
            tableMapping.ColumnMappings.Add("Medida", "Medida");
            tableMapping.ColumnMappings.Add("Almacen", "Almacen");
            tableMapping.ColumnMappings.Add("Lote", "Lote");
            tableMapping.ColumnMappings.Add("Longitud", "Longitud");
            tableMapping.ColumnMappings.Add("Norma", "Norma");
            tableMapping.ColumnMappings.Add("Espesor", "Espesor");
            tableMapping.ColumnMappings.Add("Descripcion", "Descripcion");
            tableMapping.ColumnMappings.Add("PesoTeorico", "PesoTeorico");
            tableMapping.ColumnMappings.Add("IdSalidaDatos", "IdSalidaDatos");
            tableMapping.ColumnMappings.Add("ubicacion", "ubicacion");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [CatMaterial] ([CodigoArticulo], [Medida], [Almacen], [Lote], [Longit" +
                "ud], [Norma], [Espesor], [Descripcion], [PesoTeorico], [IdSalidaDatos], [ubicaci" +
                "on]) VALUES (@p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10, @p11)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "CodigoArticulo", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p2", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Medida", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p3", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Almacen", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p4", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Lote", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p5", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Longitud", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p6", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Norma", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p7", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Espesor", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p8", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Descripcion", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p9", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "PesoTeorico", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p10", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IdSalidaDatos", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p11", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "ubicacion", global::System.Data.DataRowVersion.Current, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlServerCe.SqlCeConnection();
            this._connection.ConnectionString = ("Data Source =" 
                        + (System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().GetName().CodeBase) + "\\EmbInv.sdf;"));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlServerCe.SqlCeCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT [CodigoArticulo], [Medida], [Almacen], [Lote], [Longitud], [Norma], [Espes" +
                "or], [Descripcion], [PesoTeorico], [IdSalidaDatos], [ubicacion] FROM [CatMateria" +
                "l]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(EmbInvDataSet.CatMaterialDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual EmbInvDataSet.CatMaterialDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            EmbInvDataSet.CatMaterialDataTable dataTable = new EmbInvDataSet.CatMaterialDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(EmbInvDataSet.CatMaterialDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(EmbInvDataSet dataSet) {
            return this.Adapter.Update(dataSet, "CatMaterial");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string p1, string p2, string p3, string p4, string p5, string p6, string p7, string p8, global::System.Nullable<double> p9, global::System.Nullable<int> p10, string p11) {
            if ((p1 == null)) {
                throw new global::System.ArgumentNullException("p1");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(p1));
            }
            if ((p2 == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(p2));
            }
            if ((p3 == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(p3));
            }
            if ((p4 == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(p4));
            }
            if ((p5 == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(p5));
            }
            if ((p6 == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(p6));
            }
            if ((p7 == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(p7));
            }
            if ((p8 == null)) {
                throw new global::System.ArgumentNullException("p8");
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(p8));
            }
            if ((p9.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((double)(p9.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((p10.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((int)(p10.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((p11 == null)) {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(p11));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    public partial class CatMaterialNoTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlServerCe.SqlCeDataAdapter _adapter;
        
        private global::System.Data.SqlServerCe.SqlCeConnection _connection;
        
        private global::System.Data.SqlServerCe.SqlCeCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CatMaterialNoTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlServerCe.SqlCeDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlServerCe.SqlCeConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlServerCe.SqlCeCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlServerCe.SqlCeCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlServerCe.SqlCeDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "CatMaterialNo";
            tableMapping.ColumnMappings.Add("IdMaterial", "IdMaterial");
            tableMapping.ColumnMappings.Add("CodigoBarras", "CodigoBarras");
            tableMapping.ColumnMappings.Add("Descripcion", "Descripcion");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [CatMaterialNo] ([CodigoBarras], [Descripcion]) VALUES (@p1, @p2)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "CodigoBarras", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p2", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Descripcion", global::System.Data.DataRowVersion.Current, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlServerCe.SqlCeConnection();
            this._connection.ConnectionString = ("Data Source =" 
                        + (System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().GetName().CodeBase) + "\\EmbInv.sdf;"));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlServerCe.SqlCeCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT [IdMaterial], [CodigoBarras], [Descripcion] FROM [CatMaterialNo]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(EmbInvDataSet.CatMaterialNoDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual EmbInvDataSet.CatMaterialNoDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            EmbInvDataSet.CatMaterialNoDataTable dataTable = new EmbInvDataSet.CatMaterialNoDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(EmbInvDataSet.CatMaterialNoDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(EmbInvDataSet dataSet) {
            return this.Adapter.Update(dataSet, "CatMaterialNo");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string p1, string p2) {
            if ((p1 == null)) {
                throw new global::System.ArgumentNullException("p1");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(p1));
            }
            if ((p2 == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(p2));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    public partial class catUsuariosTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlServerCe.SqlCeDataAdapter _adapter;
        
        private global::System.Data.SqlServerCe.SqlCeConnection _connection;
        
        private global::System.Data.SqlServerCe.SqlCeCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public catUsuariosTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlServerCe.SqlCeDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlServerCe.SqlCeConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlServerCe.SqlCeCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlServerCe.SqlCeCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlServerCe.SqlCeDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "catUsuarios";
            tableMapping.ColumnMappings.Add("IdUsuario", "IdUsuario");
            tableMapping.ColumnMappings.Add("usuario", "usuario");
            tableMapping.ColumnMappings.Add("contrasena", "contrasena");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [catUsuarios] ([usuario], [contrasena]) VALUES (@p1, @p2)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "usuario", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p2", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "contrasena", global::System.Data.DataRowVersion.Current, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlServerCe.SqlCeConnection();
            this._connection.ConnectionString = ("Data Source =" 
                        + (System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().GetName().CodeBase) + "\\EmbInv.sdf;"));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlServerCe.SqlCeCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT [IdUsuario], [usuario], [contrasena] FROM [catUsuarios]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(EmbInvDataSet.catUsuariosDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual EmbInvDataSet.catUsuariosDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            EmbInvDataSet.catUsuariosDataTable dataTable = new EmbInvDataSet.catUsuariosDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(EmbInvDataSet.catUsuariosDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(EmbInvDataSet dataSet) {
            return this.Adapter.Update(dataSet, "catUsuarios");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string p1, string p2) {
            if ((p1 == null)) {
                throw new global::System.ArgumentNullException("p1");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(p1));
            }
            if ((p2 == null)) {
                throw new global::System.ArgumentNullException("p2");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(p2));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    public partial class EmbarqueTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlServerCe.SqlCeDataAdapter _adapter;
        
        private global::System.Data.SqlServerCe.SqlCeConnection _connection;
        
        private global::System.Data.SqlServerCe.SqlCeCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public EmbarqueTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlServerCe.SqlCeDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlServerCe.SqlCeConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlServerCe.SqlCeCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlServerCe.SqlCeCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlServerCe.SqlCeDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Embarque";
            tableMapping.ColumnMappings.Add("IdEmbarque", "IdEmbarque");
            tableMapping.ColumnMappings.Add("Descripcion", "Descripcion");
            tableMapping.ColumnMappings.Add("Peso", "Peso");
            tableMapping.ColumnMappings.Add("FechaAlta", "FechaAlta");
            tableMapping.ColumnMappings.Add("LLeno", "LLeno");
            tableMapping.ColumnMappings.Add("IdUsuario", "IdUsuario");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [Embarque] WHERE (([IdEmbarque] = @p1))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IdEmbarque", global::System.Data.DataRowVersion.Original, null));
            this._adapter.InsertCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [Embarque] ([Descripcion], [Peso], [FechaAlta], [LLeno], [IdUsuario])" +
                " VALUES (@p1, @p2, @p3, @p4, @p5)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Descripcion", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p2", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Peso", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p3", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "FechaAlta", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p4", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "LLeno", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p5", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IdUsuario", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [Embarque] SET [Descripcion] = @p1, [Peso] = @p2, [FechaAlta] = @p3, [LLen" +
                "o] = @p4, [IdUsuario] = @p5 WHERE (([IdEmbarque] = @p6))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Descripcion", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p2", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Peso", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p3", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "FechaAlta", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p4", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "LLeno", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p5", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IdUsuario", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p6", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IdEmbarque", global::System.Data.DataRowVersion.Original, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlServerCe.SqlCeConnection();
            this._connection.ConnectionString = ("Data Source =" 
                        + (System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().GetName().CodeBase) + "\\EmbInv.sdf;"));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlServerCe.SqlCeCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT [IdEmbarque], [Descripcion], [Peso], [FechaAlta], [LLeno], [IdUsuario] FRO" +
                "M [Embarque]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(EmbInvDataSet.EmbarqueDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual EmbInvDataSet.EmbarqueDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            EmbInvDataSet.EmbarqueDataTable dataTable = new EmbInvDataSet.EmbarqueDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(EmbInvDataSet.EmbarqueDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(EmbInvDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Embarque");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int p1) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(p1));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string p1, global::System.Nullable<double> p2, string p3, global::System.Nullable<bool> p4, global::System.Nullable<int> p5) {
            if ((p1 == null)) {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(p1));
            }
            if ((p2.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((double)(p2.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((p3 == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(p3));
            }
            if ((p4.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((bool)(p4.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((p5.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((int)(p5.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string p1, global::System.Nullable<double> p2, string p3, global::System.Nullable<bool> p4, global::System.Nullable<int> p5, int p6) {
            if ((p1 == null)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(p1));
            }
            if ((p2.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((double)(p2.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((p3 == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(p3));
            }
            if ((p4.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((bool)(p4.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((p5.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(p5.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(p6));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    public partial class EmbarqueMaterialTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlServerCe.SqlCeDataAdapter _adapter;
        
        private global::System.Data.SqlServerCe.SqlCeConnection _connection;
        
        private global::System.Data.SqlServerCe.SqlCeCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public EmbarqueMaterialTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlServerCe.SqlCeDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlServerCe.SqlCeConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlServerCe.SqlCeCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlServerCe.SqlCeCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlServerCe.SqlCeDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "EmbarqueMaterial";
            tableMapping.ColumnMappings.Add("IdEmbarque", "IdEmbarque");
            tableMapping.ColumnMappings.Add("CodigoBarras", "CodigoBarras");
            tableMapping.ColumnMappings.Add("IdSalidaDatos", "IdSalidaDatos");
            tableMapping.ColumnMappings.Add("Peso", "Peso");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [EmbarqueMaterial] ([IdEmbarque], [CodigoBarras], [IdSalidaDatos], [P" +
                "eso]) VALUES (@p1, @p2, @p3, @p4)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IdEmbarque", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p2", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "CodigoBarras", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p3", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IdSalidaDatos", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p4", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Peso", global::System.Data.DataRowVersion.Current, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlServerCe.SqlCeConnection();
            this._connection.ConnectionString = ("Data Source =" 
                        + (System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().GetName().CodeBase) + "\\EmbInv.sdf;"));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlServerCe.SqlCeCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT [IdEmbarque], [CodigoBarras], [IdSalidaDatos], [Peso] FROM [EmbarqueMateri" +
                "al]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(EmbInvDataSet.EmbarqueMaterialDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual EmbInvDataSet.EmbarqueMaterialDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            EmbInvDataSet.EmbarqueMaterialDataTable dataTable = new EmbInvDataSet.EmbarqueMaterialDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(EmbInvDataSet.EmbarqueMaterialDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(EmbInvDataSet dataSet) {
            return this.Adapter.Update(dataSet, "EmbarqueMaterial");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int p1, string p2, int p3, double p4) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(p1));
            if ((p2 == null)) {
                throw new global::System.ArgumentNullException("p2");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(p2));
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(p3));
            this.Adapter.InsertCommand.Parameters[3].Value = ((double)(p4));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    public partial class InventarioTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlServerCe.SqlCeDataAdapter _adapter;
        
        private global::System.Data.SqlServerCe.SqlCeConnection _connection;
        
        private global::System.Data.SqlServerCe.SqlCeCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public InventarioTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlServerCe.SqlCeDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlServerCe.SqlCeConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlServerCe.SqlCeCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlServerCe.SqlCeCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlServerCe.SqlCeDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Inventario";
            tableMapping.ColumnMappings.Add("CodigoBarras", "CodigoBarras");
            tableMapping.ColumnMappings.Add("Cantidad", "Cantidad");
            tableMapping.ColumnMappings.Add("Medida", "Medida");
            tableMapping.ColumnMappings.Add("Almacen", "Almacen");
            tableMapping.ColumnMappings.Add("Lote", "Lote");
            tableMapping.ColumnMappings.Add("Longitud", "Longitud");
            tableMapping.ColumnMappings.Add("Norma", "Norma");
            tableMapping.ColumnMappings.Add("Espesor", "Espesor");
            tableMapping.ColumnMappings.Add("Descripcion", "Descripcion");
            tableMapping.ColumnMappings.Add("ubicacion", "ubicacion");
            tableMapping.ColumnMappings.Add("idUsuario", "idUsuario");
            tableMapping.ColumnMappings.Add("IdArticulo", "IdArticulo");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [Inventario] ([CodigoBarras], [Cantidad], [Medida], [Almacen], [Lote]" +
                ", [Longitud], [Norma], [Espesor], [Descripcion], [ubicacion], [idUsuario], [IdAr" +
                "ticulo]) VALUES (@p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10, @p11, @p12)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "CodigoBarras", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p2", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Cantidad", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p3", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Medida", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p4", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Almacen", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p5", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Lote", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p6", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Longitud", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p7", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Norma", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p8", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Espesor", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p9", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Descripcion", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p10", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "ubicacion", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p11", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "idUsuario", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p12", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IdArticulo", global::System.Data.DataRowVersion.Current, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlServerCe.SqlCeConnection();
            this._connection.ConnectionString = ("Data Source =" 
                        + (System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().GetName().CodeBase) + "\\EmbInv.sdf;"));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlServerCe.SqlCeCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT [CodigoBarras], [Cantidad], [Medida], [Almacen], [Lote], [Longitud], [Norm" +
                "a], [Espesor], [Descripcion], [ubicacion], [idUsuario], [IdArticulo] FROM [Inven" +
                "tario]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(EmbInvDataSet.InventarioDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual EmbInvDataSet.InventarioDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            EmbInvDataSet.InventarioDataTable dataTable = new EmbInvDataSet.InventarioDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(EmbInvDataSet.InventarioDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(EmbInvDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Inventario");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string p1, int p2, string p3, string p4, string p5, string p6, string p7, string p8, string p9, string p10, global::System.Nullable<int> p11, global::System.Nullable<int> p12) {
            if ((p1 == null)) {
                throw new global::System.ArgumentNullException("p1");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(p1));
            }
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(p2));
            if ((p3 == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(p3));
            }
            if ((p4 == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(p4));
            }
            if ((p5 == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(p5));
            }
            if ((p6 == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(p6));
            }
            if ((p7 == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(p7));
            }
            if ((p8 == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(p8));
            }
            if ((p9 == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(p9));
            }
            if ((p10 == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(p10));
            }
            if ((p11.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[10].Value = ((int)(p11.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((p12.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[11].Value = ((int)(p12.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
}
namespace EmbInvDataSetUtil {
    using System;
    using System.Data;
    
    
    public partial class DesignerUtil {
        
        public static bool IsDesignTime() {
            // Determine if this instance is running against .NET Framework by using the MSCoreLib PublicKeyToken
            System.Reflection.Assembly mscorlibAssembly = typeof(int).Assembly;
            if ((mscorlibAssembly != null)) {
                if (mscorlibAssembly.FullName.ToUpper().EndsWith("B77A5C561934E089")) {
                    return true;
                }
            }
            return false;
        }
        
        public static bool IsRunTime() {
            // Determine if this instance is running against .NET Compact Framework by using the MSCoreLib PublicKeyToken
            System.Reflection.Assembly mscorlibAssembly = typeof(int).Assembly;
            if ((mscorlibAssembly != null)) {
                if (mscorlibAssembly.FullName.ToUpper().EndsWith("969DB8053D3322AC")) {
                    return true;
                }
            }
            return false;
        }
    }
}
